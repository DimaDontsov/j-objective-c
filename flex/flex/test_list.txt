1. if_stmt с пустым телом
int main() {
    if (a > b) {

    }
}

2. if_stmt
int main() {
    if (a > b) {
        int c = a;
    }
}

3. if_stmt с else, тела пустые
int main() {
    if (a > b) {

    } else {

    }
}

4. if_stmt с else
int main() {
    if (a > b) {
        int c = a;
    } else {
        int c = b;
    }
}

5. if_stmt с else_if, тела пустые
int main() {
    if (a > b) {

    } else if (a < b) {

    }
}

6. if_stmt с else_if
int main() {
    if (a > b) {
        int c = a;
    } else if (a < b) {
        int c = b;
    }
}

7. if_stmt с else_if и else, тела пустые
int main() {
    if (a > b) {

    } else if (a < b) {

    } else {

    }
}

8. if_stmt с else_if и else
int main() {
    if (a > b) {
        int c = a;
    } else if (a < b) {
        int c = b;
    } else {
        int c;
    }
}

9. if_stmt с одним stmt
int main() {
    if (a > b)
        inc c = a;
}

10. while_stmt с пустым телом
int main() {
    while ( a < b ) {

    }  
}

11. while_stmt
int main() {
    while ( a < b ) {
        a = a + 1;
    }  
}

12. while_stmt с одним stmt
int main() {
    while ( a < b )
        a = a + 1;
}

13. return_stmt
int main() {
    return 0;
}

14. return_stmt пустой
void main() {
    return;
}

15. expr binary
int main() {
    b + c;
}

16. expr unary
int main() {
    -b;
}

17. expr несколько операций одного приоритета
int main() {
    a + b + c;
}

18. expr несколько операций разных приоритетов
int main() {
    a * b + c;
}

19. expr со скобками
int main() {
    a * (b + c);
}

20. expr с присвоением
int main() {
    a = b + c;
}

21. несколько stmt
int main() {
    int a = 3;
    float b;
    int c;
    b = a;
    c = b + a * 2;
    return c;
}

22. 
int main() {
    while ( a > b ) {
        if ( a == b ) {
            int c = a;
            return c;
        }
    }
}

23.
int main() {
    while ( a > b )
        if ( a == b)
            int c = a;
    return 0;
}

24. enum объявление
enum type {
    TYPE_VOID,
    TYPE_INT,
    TYPE_FLOAT
};

25. enum объявление c присвоением
enum type {
    TYPE_VOID,
    TYPE_INT = 2,
    TYPE_FLOAT = 3
}; 

26. func_decl без аргументов
int func();

27. func_decl с аргументами
int func(int a, float b);

28. func_impl без аргументов
int func() {

}

29. func_impl с аргументами
int func(int a, float b) {

}

30. func_call без аргументов
int main() {
    func();
}

31. func_call с аргументами в виде переменных
int main() {
    func(a, b);
}

32. func_call с аргументами в виде выражений
int main() {
    func(a + 2, b * 3, abc() );
}

33. func_call с аргументами в виде переменных и выражений
int main() {
    func(a, b * 3, abc());
}

34.
enum abc{ A, B, C};
int func(int a, float b);
@interface Complex : NSObject
{
    int _im;
}
+ (Complex *)complexWithRe: (float)re andIm: (float)im; //метод класса для одноэтапного создания объекта
- (Complex *)add: (Complex *)other; //метод для сложения
- (float)im;
- (void)setIm: (float)im;
@end
int main() {

}

35. Объявление класса
@interface Complex : NSObject
{
    int _im;
}
- (void)setIm: (float)im;
@end

36. Объявление класса без методов
@interface Complex : NSObject
{
    int _im;
}
@end

37. Объявление класса без полей
@interface Complex : NSObject
{
}
- (void)setIm: (float)im;
@end

38. Код программы
enum abc { A_A, B_B, C_C};
@interface Complex : NSObject
{
    int _im;
}
@public
- (void)setIm: (float)im;
@end
int sum(int a, float b);
int main() {
    int c = 2;
    string str = "hello";
    int d = sum(2, 3);
    if (d > c) {
        while (d > c) {
            c = c + 1;
        }
    } else if (d < c) {
        printf(str);
    } else {
         Complex * comp; /*= [[Complex alloc] init]; */
         comp->_im;
    }
    return 0;
}

39.Поле


@interface A 
{
	@public
	int a;
}

@end

@implementation A 
@end

void main()
{
	A* a = [A alloc];
	a->a = 5;
	printf("-------");
	printf( [NSString fromInt: a->a]);
	printf("-------");
}


